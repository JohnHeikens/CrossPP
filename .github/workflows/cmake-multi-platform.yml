# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.sys.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      
      #info about the the sys.shell trick:
      #https://github.com/orgs/community/discussions/27143
      matrix:
        sys:
          - { os: windows-latest, shell: 'msys2 {0}' }
          - { os: ubuntu-latest,  shell: bash  }
          - { os: macos-latest,   shell: bash  }
        build_type: [Release]
        compiler:
          - { cc: gcc,   cxx: g++ }
          - { cc: clang, cxx: clang++ }
          - { cc: cl, cxx: cl }
        # include:
        #   - sys.os: windows-latest
        #     compiler.cc: cl
        #     compiler.cxx: cl
        #   - sys.os: ubuntu-latest
        #     needs: setup-ubuntu
        #     compiler.cc: gcc
        #     compiler.cxx: g++
        #   - sys.os: ubuntu-latest
        #     needs: setup-ubuntu
        #     compiler.cc: clang
        #     compiler.cxx: clang++
        exclude:
          - sys: { os: ubuntu-latest, shell: bash }
            compiler: { cc: cl, cxx: cl }
          - sys: { os: macos-latest, shell: bash }
            compiler: { cc: cl, cxx: cl }
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}
    steps:
      - uses: actions/checkout@v4

      - name: install-msys2
        if: matrix.sys.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          msystem: MINGW64
          update: true
          #changed to clang for better debugging
          #mingw-w64-x86_64-toolchain
          #mingw-w64-x86_64-ninja
          #mingw-w64-clang-x86_64-toolchain
          #mingw-w64-clang-x86_64-ninja
          #TODO: install cl
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-ninja

        
        
        

      #- name: install-ninja
      #  if: matrix.sys.os == 'windows-latest'
      #  shell: bash
      #  #choco install visualstudio2022buildtools -y
      #  run:
      #    choco install ninja -y
      #- name: add mingw bin directory to path
      #  if: matrix.sys.os == 'windows-latest'
      #  #needs: install-msys2
      #  run: Add-Content $env:GITHUB_PATH "C:\msys64\mingw64\bin"

      #https://www.sfml-dev.org/tutorials/2.6/compile-with-cmake.php
      - name: install-deps-linux # shell: bash
        if: matrix.sys.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && \
          sudo apt-get install ninja-build &&\
          sudo apt install libfreetype6-dev libx11-dev libxrandr-dev libudev-dev libgl1-mesa-dev libflac-dev libogg-dev libvorbis-dev libopenal-dev libpthread-stubs0-dev -y && \
          sudo apt install xorg-dev freeglut3-dev libudev-dev
        
      - name: install-deps-mac
        if: matrix.sys.os == 'macos-latest'
        run: |
          brew install ninja
          brew install openal-soft
        # installed already
        # brew install vcpkg

      - name: checkNinja # shell: msys2 {0}
        run: ninja --version

      - name: install-vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: create-folders
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build

      #- name: update git
      #  shell: bash
      #  run:
      #    git pull
      - name: Configure CMake
        # shell: msys2 {0}
        working-directory: ${{ steps.strings.outputs.build-output-dir }}

        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #run: >
        #  cmake -B ${{ steps.strings.outputs.build-output-dir }}
        #  -G Ninja
        #  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #  -S ${{ github.workspace }}
        #run: >
        #  cmake -B ${{ steps.strings.outputs.build-output-dir }}
        #  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }}
        #  -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }}
        #  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        #  -S ${{ github.workspace }}

      - name: Build
        # shell: msys2 {0}
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ninja -j2 #--build ${{ steps.strings.outputs.build-output-dir }} # --config ${{ matrix.build_type }}

      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #  run: ctest --build-config ${{ matrix.build_type }}
